from __future__ import annotations

import logging
import secrets
from decimal import Decimal
from typing import TYPE_CHECKING

from aiogram import F, Router
from aiogram.exceptions import TelegramBadRequest

from tele_store.crud.cart import CartManager
from tele_store.crud.category import CategoryManager
from tele_store.crud.order import OrderManager
from tele_store.crud.product import ProductManager
from tele_store.keyboards.inline.cancel_button import cancel_key
from tele_store.keyboards.inline.cart_menu import build_cart_keyboard
from tele_store.keyboards.inline.order_confirm_menu import order_confirm_keyboard
from tele_store.keyboards.inline.product_order_menu import product_order_keyboard
from tele_store.keyboards.inline.user_category_menu import get_user_category_keyboard
from tele_store.keyboards.inline.user_product_menu import get_user_product_keyboard
from tele_store.schemas.cart import AddCartItem, UpdateCartItemCount
from tele_store.schemas.order import CreateOrder, CreateOrderItem
from tele_store.states.states import NewDelivery

if TYPE_CHECKING:
    from aiogram.fsm.context import FSMContext
    from aiogram.types import CallbackQuery
    from sqlalchemy.ext.asyncio import AsyncSession

    from tele_store.models.models import Cart

router = Router()
logger = logging.getLogger(__name__)


def generate_order_number() -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."""
    return secrets.token_hex(4).upper()


MONEY_STEP = Decimal("0.01")


def format_money(amount: Decimal) -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    return f"{amount.quantize(MONEY_STEP)} ‚ÇΩ"


def collect_cart_lines(cart: Cart) -> tuple[list[str], Decimal]:
    """–°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É."""
    total = Decimal(0)
    lines: list[str] = []

    for index, item in enumerate(cart.items, start=1):
        product = item.product
        if product is None:
            continue

        line_total = product.price * item.quantity
        total += line_total
        lines.append(
            f"{index}. {product.name} ‚Äî {item.quantity} —à—Ç. √ó "
            f"{format_money(product.price)} = {format_money(line_total)}"
        )

    return lines, total


def build_cart_text(cart: Cart) -> str:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    lines, total = collect_cart_lines(cart)
    if not lines:
        return "üõí –°–µ–π—á–∞—Å –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    items_text = "\n".join(lines)
    return (
        "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        f"{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: <b>{format_money(total)}</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
    )


def build_order_preview_text(cart: Cart, data: dict[str, object]) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    lines, total = collect_cart_lines(cart)
    items_text = "\n".join(lines) if lines else "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"

    return (
        "üì¶ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: <b>{format_money(total)}</b>\n\n"
        f"–ò–º—è: {data.get('name', '‚Äî')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number', '‚Äî')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address', '‚Äî')}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery_method', '‚Äî')}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
    )


async def sanitize_cart(session: AsyncSession, cart: Cart) -> Cart | None:
    """–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É."""
    removed = False
    for item in list(cart.items):
        product = item.product
        if product is None or not getattr(product, "is_active", True):
            await CartManager.delete_cart_item(session, item.id)
            removed = True

    if removed:
        return await CartManager.get_cart_by_user(session=session, tg_id=cart.tg_id)
    return cart


async def refresh_cart_view(call: CallbackQuery, session: AsyncSession) -> Cart | None:
    """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π."""
    cart = await CartManager.get_cart_by_user(session=session, tg_id=call.from_user.id)
    if cart is None:
        try:
            await call.message.edit_text("üõí –°–µ–π—á–∞—Å –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        except TelegramBadRequest:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã", exc_info=True)
        return None

    cart = await sanitize_cart(session, cart) or cart
    if not cart.items:
        try:
            await call.message.edit_text("üõí –°–µ–π—á–∞—Å –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        except TelegramBadRequest:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã", exc_info=True)
        return None

    text = build_cart_text(cart)
    keyboard = build_cart_keyboard(cart)
    try:
        await call.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã", exc_info=True)

    return cart


@router.callback_query(F.data == "catalog")
async def open_catalog(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    keyboard, total = await get_user_category_keyboard(session=session)

    if total == 0:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
        return

    await call.answer()
    await call.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(call: CallbackQuery, session: AsyncSession) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    keyboard, total = await get_user_category_keyboard(session=session)

    if total == 0:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", show_alert=True)
        return

    await call.answer()

    try:
        await call.message.edit_reply_markup()
    except Exception:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è", exc_info=True)

    await call.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("user_category_page:"))
async def paginate_categories(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
    page = int(call.data.split(":")[1])
    keyboard, total = await get_user_category_keyboard(session=session, page=page)

    if total == 0:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", show_alert=True)
        return

    await call.message.edit_reply_markup(reply_markup=keyboard)
    await call.answer()


@router.callback_query(F.data.startswith("user_category:"))
async def open_category(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    _, category_id_raw, *_ = call.data.split(":")
    category_id = int(category_id_raw)

    category = await CategoryManager.get_category(
        session=session, category_id=category_id
    )

    if category is None:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    keyboard, total = await get_user_product_keyboard(
        session=session, category_id=category_id
    )

    if total == 0:
        await call.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    await call.answer()
    await call.message.answer(
        f"üõç <b>{category.name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=keyboard,
    )


@router.callback_query(F.data.startswith("user_product_page:"))
async def paginate_products(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    _, category_raw, page_raw = call.data.split(":")
    category_id = int(category_raw)
    page = int(page_raw)

    keyboard, total = await get_user_product_keyboard(
        session=session, category_id=category_id, page=page
    )

    if total == 0:
        await call.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    await call.message.edit_reply_markup(reply_markup=keyboard)
    await call.answer()


@router.callback_query(F.data.startswith("user_product:"))
async def show_product_preview(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."""
    _, product_raw, category_raw, page_raw = call.data.split(":")
    product_id = int(product_raw)
    category_id = int(category_raw)
    page = int(page_raw)

    product = await ProductManager.get_product(session=session, product_id=product_id)

    if product is None or not product.is_active:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    caption = (
        f"üì¶ <b>{product.name}</b>\n"
        f"üíµ –¶–µ–Ω–∞: {product.price} ‚ÇΩ\n"
        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '‚Äî'}"
    )

    keyboard = product_order_keyboard(
        category_id=category_id, product_id=product.id, page=page
    )

    if product.photo_file_id:
        await call.message.answer_photo(
            product.photo_file_id,
            caption=caption,
            reply_markup=keyboard,
        )
    else:
        await call.message.answer(caption, reply_markup=keyboard)

    await call.answer()


@router.callback_query(F.data == "cart")
async def open_cart(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    cart = await CartManager.get_cart_by_user(session=session, tg_id=call.from_user.id)
    cleaned_cart = await sanitize_cart(session, cart) if cart else cart

    if cleaned_cart is None or not cleaned_cart.items:
        await call.answer("–°–µ–π—á–∞—Å –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    if cleaned_cart is not cart:
        await call.answer(
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –∏ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.",
            show_alert=True,
        )
    else:
        await call.answer()

    text = build_cart_text(cleaned_cart)
    keyboard = build_cart_keyboard(cleaned_cart)
    await call.message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "cancel_order")
async def cancel_order(call: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏ –æ—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    if await state.get_state() is not None:
        await state.clear()
    try:
        await call.message.edit_text(
            "‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ö–æ—Ä–∑–∏–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏."
        )
    except TelegramBadRequest:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞", exc_info=True)
    await call.answer()


@router.callback_query(F.data.startswith("add_to_cart:"))
async def add_product_to_cart(call: CallbackQuery, session: AsyncSession) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    product_id = int(call.data.split(":")[1])
    product = await ProductManager.get_product(session=session, product_id=product_id)

    if product is None or not product.is_active:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", show_alert=True)
        return

    cart = await CartManager.get_cart_by_user(session=session, tg_id=call.from_user.id)
    if cart is None:
        cart = await CartManager.create_cart(session=session, tg_id=call.from_user.id)

    existing_item = await CartManager.get_cart_item_by_product(
        session=session, cart_id=cart.id, product_id=product.id
    )

    if existing_item is None:
        await CartManager.add_cart_item(
            session=session,
            payload=AddCartItem(cart_id=cart.id, product_id=product.id, quantity=1),
        )
    else:
        await CartManager.update_cart_item_count(
            session=session,
            payload=UpdateCartItemCount(
                cart_item_id=existing_item.id,
                quantity=existing_item.quantity + 1,
            ),
        )

    await call.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É!")


@router.callback_query(F.data.startswith("cart_increase:"))
async def increase_cart_item(call: CallbackQuery, session: AsyncSession) -> None:
    """–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    item_id = int(call.data.split(":")[1])
    cart_item = await CartManager.get_cart_item(session=session, cart_item_id=item_id)

    if cart_item is None or cart_item.cart.tg_id != call.from_user.id:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.", show_alert=True)
        return

    await CartManager.update_cart_item_count(
        session=session,
        payload=UpdateCartItemCount(
            cart_item_id=cart_item.id,
            quantity=cart_item.quantity + 1,
        ),
    )

    await refresh_cart_view(call, session)
    await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ.")


@router.callback_query(F.data.startswith("cart_decrease:"))
async def decrease_cart_item(call: CallbackQuery, session: AsyncSession) -> None:
    """–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ."""
    item_id = int(call.data.split(":")[1])
    cart_item = await CartManager.get_cart_item(session=session, cart_item_id=item_id)

    if cart_item is None or cart_item.cart.tg_id != call.from_user.id:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.", show_alert=True)
        return

    new_quantity = cart_item.quantity - 1
    if new_quantity <= 0:
        await CartManager.delete_cart_item(session=session, cart_item_id=cart_item.id)
        await refresh_cart_view(call, session)
        await call.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.")
        return

    await CartManager.update_cart_item_count(
        session=session,
        payload=UpdateCartItemCount(
            cart_item_id=cart_item.id,
            quantity=new_quantity,
        ),
    )

    await refresh_cart_view(call, session)
    await call.answer("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ.")


@router.callback_query(F.data.startswith("cart_remove:"))
async def remove_cart_item(call: CallbackQuery, session: AsyncSession) -> None:
    """–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    item_id = int(call.data.split(":")[1])
    cart_item = await CartManager.get_cart_item(session=session, cart_item_id=item_id)

    if cart_item is None or cart_item.cart.tg_id != call.from_user.id:
        await call.answer("–¢–æ–≤–∞—Ä —É–∂–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–æ—Ä–∑–∏–Ω–µ.", show_alert=True)
        return

    await CartManager.delete_cart_item(session=session, cart_item_id=cart_item.id)
    await refresh_cart_view(call, session)
    await call.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª—ë–Ω.")


@router.callback_query(F.data == "cart_clear")
async def clear_cart(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    cart = await CartManager.get_cart_by_user(session=session, tg_id=call.from_user.id)
    if cart is None or not cart.items:
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    await CartManager.clear_cart(session=session, cart_id=cart.id)
    await refresh_cart_view(call, session)
    await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")


@router.callback_query(F.data.startswith("cart_ignore:"))
async def ignore_cart_info(call: CallbackQuery) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."""
    await call.answer()


@router.callback_query(F.data == "checkout_cart")
async def start_checkout(
    call: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã."""
    cart = await CartManager.get_cart_by_user(session=session, tg_id=call.from_user.id)
    if cart is None or not cart.items:
        await call.answer(
            "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º.", show_alert=True
        )
        await refresh_cart_view(call, session)
        return

    cleaned_cart = await sanitize_cart(session, cart) or cart
    if cleaned_cart is None or not cleaned_cart.items:
        await call.answer(
            "–í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏.",
            show_alert=True,
        )
        await refresh_cart_view(call, session)
        return

    await state.clear()
    await state.set_state(NewDelivery.name)
    await state.update_data(cart_id=cleaned_cart.id)

    await call.answer()
    try:
        await call.message.edit_text(
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–∞–≤–∞–π –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑. –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
            reply_markup=cancel_key(),
        )
    except TelegramBadRequest:
        logger.debug(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º", exc_info=True
        )
        await call.message.answer(
            "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–∞–≤–∞–π –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑. –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
            reply_markup=cancel_key(),
        )


@router.callback_query(
    NewDelivery.delivery_method, F.data.in_(["select_courier", "select_self-delivery"])
)
async def choose_delivery_method(
    call: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞."""
    delivery_method = "–ö—É—Ä—å–µ—Ä" if call.data == "select_courier" else "–°–∞–º–æ–≤—ã–≤–æ–∑"

    await state.update_data(delivery_method=delivery_method)
    await state.set_state(NewDelivery.confirm)

    data = await state.get_data()
    cart_id = data.get("cart_id")

    if cart_id is None:
        await state.clear()
        await call.message.answer(
            "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=cancel_key(),
        )
        await call.answer(show_alert=True)
        return

    cart = await CartManager.get_cart(session=session, cart_id=int(cart_id))
    cart = await sanitize_cart(session, cart) if cart else cart

    if cart is None or not cart.items:
        await state.clear()
        await call.message.answer(
            "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
        )
        await call.answer(show_alert=True)
        return

    preview = build_order_preview_text(cart, data)
    await call.answer()
    await call.message.answer(preview, reply_markup=order_confirm_keyboard())


@router.callback_query(NewDelivery.confirm, F.data == "confirm_order")
async def confirm_order(
    call: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑–µ."""
    data = await state.get_data()
    cart_id = data.get("cart_id")

    if cart_id is None:
        await state.clear()
        await call.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ."
        )
        await call.answer(show_alert=True)
        return

    cart = await CartManager.get_cart(session=session, cart_id=int(cart_id))
    cart = await sanitize_cart(session, cart) if cart else cart

    if cart is None or not cart.items:
        await state.clear()
        await call.message.edit_text(
            "‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        await call.answer(show_alert=True)
        return

    lines, total_price = collect_cart_lines(cart)
    if not lines:
        await state.clear()
        await call.message.edit_text(
            "‚ùå –í –∫–æ—Ä–∑–∏–Ω–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–∑–∏—Ü–∏–∏."
        )
        await call.answer(show_alert=True)
        return

    order_number = generate_order_number()
    order_payload = CreateOrder(
        order_number=order_number,
        tg_id=call.from_user.id,
        name=data.get("name"),
        phone=data.get("phone_number"),
        addres=data.get("address"),
        total_price=total_price,
        delivery_method=data.get("delivery_method"),
    )

    order = await OrderManager.create_order(session=session, payload=order_payload)

    for item in cart.items:
        product = item.product
        if product is None:
            continue
        await OrderManager.create_order_item(
            session=session,
            payload=CreateOrderItem(
                order_id=order.id,
                product_id=product.id,
                quantity=item.quantity,
                price=product.price,
            ),
        )

    await CartManager.clear_cart(session=session, cart_id=cart.id)

    items_text = "\n".join(lines)
    summary = (
        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_number}</code>\n"
        f"{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: <b>{format_money(total_price)}</b>\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery_method')}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )

    await call.message.edit_text(summary)
    await state.clear()
    await call.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", show_alert=True)
