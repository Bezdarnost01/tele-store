from __future__ import annotations

import logging
import secrets
from typing import TYPE_CHECKING

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from tele_store.crud.category import CategoryManager
from tele_store.crud.order import OrderManager
from tele_store.crud.product import ProductManager
from tele_store.keyboards.inline.cancel_button import cancel_key
from tele_store.keyboards.inline.product_order_menu import product_order_keyboard
from tele_store.keyboards.inline.user_category_menu import get_user_category_keyboard
from tele_store.keyboards.inline.user_product_menu import get_user_product_keyboard
from tele_store.keyboards.inline.order_confirm_menu import order_confirm_keyboard
from tele_store.schemas.order import CreateOrder, CreateOrderItem
from tele_store.states.states import NewDelivery

if TYPE_CHECKING:
    from decimal import Decimal
    from sqlalchemy.ext.asyncio import AsyncSession

router = Router()
logger = logging.getLogger(__name__)


def generate_order_number() -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."""

    return secrets.token_hex(4).upper()


@router.callback_query(F.data == "catalog")
async def open_catalog(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""

    keyboard, total = await get_user_category_keyboard(session=session)

    if total == 0:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", show_alert=True)
        return

    await call.answer()
    await call.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(F.data == "back_to_categories")
async def back_to_categories(call: CallbackQuery, session: AsyncSession) -> None:
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""

    keyboard, total = await get_user_category_keyboard(session=session)

    if total == 0:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", show_alert=True)
        return

    await call.answer()

    try:
        await call.message.edit_reply_markup()
    except Exception:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ–æ–±—â–µ–Ω–∏—è", exc_info=True)

    await call.message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=keyboard)


@router.callback_query(F.data.startswith("user_category_page:"))
async def paginate_categories(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""

    page = int(call.data.split(":")[1])
    keyboard, total = await get_user_category_keyboard(session=session, page=page)

    if total == 0:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", show_alert=True)
        return

    await call.message.edit_reply_markup(reply_markup=keyboard)
    await call.answer()


@router.callback_query(F.data.startswith("user_category:"))
async def open_category(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""

    _, category_id_raw, *_ = call.data.split(":")
    category_id = int(category_id_raw)

    category = await CategoryManager.get_category(session=session, category_id=category_id)

    if category is None:
        await call.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return

    keyboard, total = await get_user_product_keyboard(
        session=session, category_id=category_id
    )

    if total == 0:
        await call.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    await call.answer()
    await call.message.answer(
        f"üõç <b>{category.name}</b>\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:",
        reply_markup=keyboard,
    )


@router.callback_query(F.data.startswith("user_product_page:"))
async def paginate_products(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Ç–æ–≤–∞—Ä–æ–≤ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""

    _, category_raw, page_raw = call.data.split(":")
    category_id = int(category_raw)
    page = int(page_raw)

    keyboard, total = await get_user_product_keyboard(
        session=session, category_id=category_id, page=page
    )

    if total == 0:
        await call.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.", show_alert=True)
        return

    await call.message.edit_reply_markup(reply_markup=keyboard)
    await call.answer()


@router.callback_query(F.data.startswith("user_product:"))
async def show_product_preview(call: CallbackQuery, session: AsyncSession) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."""

    _, product_raw, category_raw, page_raw = call.data.split(":")
    product_id = int(product_raw)
    category_id = int(category_raw)
    page = int(page_raw)

    product = await ProductManager.get_product(session=session, product_id=product_id)

    if product is None or not product.is_active:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", show_alert=True)
        return

    caption = (
        f"üì¶ <b>{product.name}</b>\n"
        f"üíµ –¶–µ–Ω–∞: {product.price} ‚ÇΩ\n"
        f"üìú –û–ø–∏—Å–∞–Ω–∏–µ: {product.description or '‚Äî'}"
    )

    keyboard = product_order_keyboard(
        category_id=category_id, product_id=product.id, page=page
    )

    if product.photo_file_id:
        await call.message.answer_photo(
            product.photo_file_id,
            caption=caption,
            reply_markup=keyboard,
        )
    else:
        await call.message.answer(caption, reply_markup=keyboard)

    await call.answer()


@router.callback_query(F.data == "cart")
async def open_cart(call: CallbackQuery) -> None:
    """–°–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã."""

    await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ–∑–∂–µ.", show_alert=True)


@router.callback_query(F.data == "cancel_order")
async def cancel_order(call: CallbackQuery, state: FSMContext) -> None:
    """–û—Ç–º–µ–Ω–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""

    if await state.get_state() == NewDelivery.confirm.state:
        await state.clear()
    await call.message.edit_text("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await call.answer()


@router.callback_query(F.data.startswith("order_product:"))
async def start_order(
    call: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞."""

    product_id = int(call.data.split(":")[1])
    product = await ProductManager.get_product(session=session, product_id=product_id)

    if product is None or not product.is_active:
        await call.answer("–¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞.", show_alert=True)
        return

    await state.clear()
    await state.set_state(NewDelivery.name)
    await state.update_data(
        product_id=product.id,
        product_name=product.name,
        product_price=str(product.price),
    )

    await call.message.answer(
        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –î–∞–≤–∞–π –æ—Ñ–æ—Ä–º–∏–º –∑–∞–∫–∞–∑. –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?",
        reply_markup=cancel_key(),
    )
    await call.answer()

@router.callback_query(
    NewDelivery.delivery_method,
    F.data.in_(["select_courier", "select_self-delivery"])
)
async def confirm_order(
    call: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–ü–æ–ª—É—á–∏—Ç—å –∂–µ–ª–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏."""

    delivery_method = (
        "–ö—É—Ä—å–µ—Ä" if call.data == "select_courier" else "–°–∞–º–æ–≤—ã–≤–æ–∑"
    )

    if not delivery_method:
        await call.message.answer(
            "‚ùå –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä: –∫—É—Ä—å–µ—Ä–æ–º –∏–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑.",
            reply_markup=cancel_key(),
        )
        return

    await state.update_data(delivery_method=delivery_method)
    await state.set_state(NewDelivery.confirm)
    await call.answer()

    data = await state.get_data()
    product_name = data.get("product_name", "‚Äî")
    product_price: Decimal | str | None = data.get("product_price")
    price_text = str(product_price) if product_price is not None else "‚Äî"

    preview = (
        "üì¶ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"–¢–æ–≤–∞—Ä: {product_name}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price_text} ‚ÇΩ\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {delivery_method}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
    )

    await call.message.answer(preview, reply_markup=order_confirm_keyboard())

@router.callback_query(NewDelivery.confirm, F.data == "confirm_order")
async def confirm_order(
    call: CallbackQuery, session: AsyncSession, state: FSMContext
) -> None:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑–µ."""

    data = await state.get_data()
    product_id_raw = data.get("product_id")
    if product_id_raw is None:
        await state.clear()
        await call.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä –µ—â—ë —Ä–∞–∑."
        )
        await call.answer(show_alert=True)
        return

    product_id = int(product_id_raw)
    product = await ProductManager.get_product(session=session, product_id=product_id)

    if product is None or not product.is_active:
        await state.clear()
        await call.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
        )
        await call.answer(show_alert=True)
        return

    order_number = generate_order_number()
    price: Decimal = product.price

    order_payload = CreateOrder(
        order_number=order_number,
        tg_id=call.from_user.id,
        total_price=price,
        delivery_method=data.get("delivery_method"),
    )

    order = await OrderManager.create_order(session=session, payload=order_payload)

    order_item_payload = CreateOrderItem(
        order_id=order.id,
        product_id=product.id,
        quantity=1,
        price=price,
    )

    await OrderManager.create_order_item(session=session, payload=order_item_payload)

    summary = (
        "‚úÖ <b>–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{order_number}</code>\n"
        f"–¢–æ–≤–∞—Ä: {product.name}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n\n"
        f"–ò–º—è: {data.get('name')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address')}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery_method')}\n\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
    )

    await call.message.edit_text(summary)
    await state.clear()
    await call.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", show_alert=True)
