from __future__ import annotations

import logging
import secrets
from decimal import Decimal
from typing import TYPE_CHECKING

from aiogram.exceptions import TelegramBadRequest

from tele_store.crud.cart import CartManager
from tele_store.keyboards.inline.cart_menu import build_cart_keyboard

if TYPE_CHECKING:
    from aiogram.types import CallbackQuery
    from sqlalchemy.ext.asyncio import AsyncSession

    from tele_store.models.models import Cart


logger = logging.getLogger(__name__)
MONEY_STEP = Decimal("0.01")


def generate_order_number() -> str:
    """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞."""
    return secrets.token_hex(4).upper()


def format_money(amount: Decimal) -> str:
    """–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–Ω—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    return f"{amount.quantize(MONEY_STEP)} ‚ÇΩ"


def collect_cart_lines(cart: Cart) -> tuple[list[str], Decimal]:
    """–°–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –∫–æ—Ä–∑–∏–Ω—ã –∏ –ø–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É."""
    total = Decimal(0)
    lines: list[str] = []

    for index, item in enumerate(cart.items, start=1):
        product = item.product
        if product is None:
            continue

        line_total = product.price * item.quantity
        total += line_total
        lines.append(
            f"{index}. {product.name} ‚Äî {item.quantity} —à—Ç. √ó "
            f"{format_money(product.price)} = {format_money(line_total)}"
        )

    return lines, total


def build_cart_text(cart: Cart) -> str:
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã."""
    lines, total = collect_cart_lines(cart)
    if not lines:
        return "üõí –°–µ–π—á–∞—Å –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞."

    items_text = "\n".join(lines)
    return (
        "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>\n\n"
        f"{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: <b>{format_money(total)}</b>\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –∏–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
    )


def build_order_preview_text(cart: Cart, data: dict[str, object]) -> str:
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    lines, total = collect_cart_lines(cart)
    items_text = "\n".join(lines) if lines else "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"

    return (
        "üì¶ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        f"{items_text}\n\n"
        f"–ò—Ç–æ–≥–æ: <b>{format_money(total)}</b>\n\n"
        f"–ò–º—è: {data.get('name', '‚Äî')}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {data.get('phone_number', '‚Äî')}\n"
        f"–ê–¥—Ä–µ—Å: {data.get('address', '‚Äî')}\n"
        f"–î–æ—Å—Ç–∞–≤–∫–∞: {data.get('delivery_method', '‚Äî')}\n\n"
        "–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ."
    )


async def sanitize_cart(session: AsyncSession, cart: Cart) -> Cart | None:
    """–£–¥–∞–ª–∏—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –≤–µ—Ä–Ω—É—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É."""
    removed = False
    for item in list(cart.items):
        product = item.product
        if product is None or not getattr(product, "is_active", True):
            await CartManager.delete_cart_item(session, item.id)
            removed = True

    if removed:
        return await CartManager.get_cart_by_user(session=session, tg_id=cart.tg_id)
    return cart


async def refresh_cart_view(call: CallbackQuery, session: AsyncSession) -> Cart | None:
    """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ—Ä–∑–∏–Ω–æ–π."""
    cart = await CartManager.get_cart_by_user(session=session, tg_id=call.from_user.id)
    if cart is None:
        try:
            await call.message.edit_text("üõí –°–µ–π—á–∞—Å –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        except TelegramBadRequest:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã", exc_info=True)
        return None

    cart = await sanitize_cart(session, cart) or cart
    if not cart.items:
        try:
            await call.message.edit_text("üõí –°–µ–π—á–∞—Å –≤–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        except TelegramBadRequest:
            logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã", exc_info=True)
        return None

    text = build_cart_text(cart)
    keyboard = build_cart_keyboard(cart)
    try:
        await call.message.edit_text(text, reply_markup=keyboard)
    except TelegramBadRequest:
        logger.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã", exc_info=True)

    return cart
