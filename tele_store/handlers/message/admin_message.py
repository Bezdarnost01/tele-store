from __future__ import annotations

import logging
from decimal import Decimal, InvalidOperation
from typing import TYPE_CHECKING

from aiogram import F, Router

from tele_store.keyboards.inline.add_category_confirm_menu import (
    add_category_confirm_keyboard,
)
from tele_store.keyboards.inline.add_item_confirm_menu import add_item_confirm_keyboard
from tele_store.keyboards.inline.cancel_button import cancel_key
from tele_store.states.states import AddNewCategory, AddNewItem

if TYPE_CHECKING:
    from aiogram.fsm.context import FSMContext
    from aiogram.types import Message

router = Router()
logger = logging.getLogger(__name__)


@router.message(AddNewItem.name)
async def add_new_item_name(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(name=text)
    await state.set_state(AddNewItem.description)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=cancel_key())


@router.message(AddNewItem.description)
async def add_new_item_description(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(description=text)
    await state.set_state(AddNewItem.price)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0):", reply_markup=cancel_key()
    )


@router.message(AddNewItem.price)
async def add_new_item_price(message: Message, state: FSMContext) -> None:
    try:
        price = Decimal(message.text.strip())
        if price <= 0:
            raise ValueError
    except (InvalidOperation, ValueError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0:")
        return

    await state.update_data(price=price)
    await state.set_state(AddNewItem.category_id)
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ —á–∏—Å–ª–æ–º (ID):", reply_markup=cancel_key()
    )


@router.message(AddNewItem.category_id)
async def add_new_item_category(message: Message, state: FSMContext) -> None:
    text = message.text.strip()

    if not text.isdigit():
        await message.answer("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º (ID). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    category_id = int(text)
    if category_id <= 0:
        await message.answer(
            "‚ùå ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:"
        )
        return

    await state.update_data(category_id=category_id)
    await state.set_state(AddNewItem.photo_file_id)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=cancel_key())


@router.message(AddNewItem.photo_file_id, F.photo)
async def add_new_item_photo(message: Message, state: FSMContext) -> None:
    photo = message.photo[-1]
    await state.update_data(photo_file_id=photo.file_id)
    await state.set_state(AddNewItem.confirm)

    data = await state.get_data()
    preview = (
        f"üì¶ <b>–ù–æ–≤—ã–π —Ç–æ–≤–∞—Ä</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"–¶–µ–Ω–∞: {data['price']}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category_id']}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?"
    )
    await message.answer_photo(
        photo.file_id, caption=preview, reply_markup=add_item_confirm_keyboard()
    )


@router.message(AddNewItem.photo_file_id)
async def add_new_item_photo_invalid(message: Message, state: FSMContext) -> None:
    await message.answer("‚ùå –ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


@router.message(AddNewCategory.name)
async def add_new_category_name(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(name=text)
    await state.set_state(AddNewCategory.description)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=cancel_key())


@router.message(AddNewCategory.description)
async def add_new_category_description(message: Message, state: FSMContext) -> None:
    text = message.text.strip()
    if not text:
        await message.answer("‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return

    await state.update_data(description=text)
    await state.set_state(AddNewCategory.confirm)
    data = await state.get_data()
    preview = (
        f"üì¶ <b>–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è</b>\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ?"
    )
    await message.answer(text=preview, reply_markup=add_category_confirm_keyboard())
